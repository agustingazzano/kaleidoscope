defAdd de https://github.com/llvm-hs/llvm-hs-examples/blob/master/basic/Main.hs

GlobalDefinition (Function {linkage = Exfreshternal,
 visibility = Default,
 dllStorageClass = Nothing,
 callingConvention = C,
 returnAttributes = [],
 returnType = IntegerType {typeBits = 32},
 name = Name "add",
 parameters = ([Parameter (IntegerType {typeBits = 32}) (Name "a") [],
Parameter (IntegerType {typeBits = 32}) (Name "b") []],
False),
 functionAttributes = [],
 section = Nothing,
 comdat = Nothing,
 alignment = 0,
 garbageCollectorName = Nothing,
 prefix = Nothing,
 basicBlocks = [BasicBlock (Name "entry") [Name "result" := Add {nsw = False,
 nuw = False,
 operand0 = LocalReference (IntegerType {typeBits = 32}) (Name "a"),
 operand1 = LocalReference (IntegerType {typeBits = 32}) (Name "b"),
 metadata = []}] (Do (Ret {returnOperand = Just (LocalReference (IntegerType {typeBits = 32}) (Name "result")),
 metadata' = []}))],
 personalityFunction = Nothing,
 metadata = []})


error en main:

*** Exception: EncodeException "Instruction of type void must not have a name: UnName 2 := Store {volatile = False,
 address = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (UnName 1),
 value = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (Name \"\\\"x\\\"\"),
 maybeAtomicity = Nothing,
 alignment = 0,
 metadata = []}"



 Store {
    volatile = False,
    address = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (UnName 1),
    value = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (Name "x"),
    maybeAtomicity = Nothing, alignment = 0, metadata = []}

Store {
    volatile = False,
    address = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (UnName 1),
    value = LocalReference (FloatingPointType {floatingPointType = DoubleFP}) (Name \"x\"),
    maybeAtomicity = Nothing, alignment = 0, metadata = []}